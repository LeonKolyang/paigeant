"""Three-agent joke workflow example showing sequential message forwarding.

This example demonstrates how to create a workflow where:
1. First agent extracts the joke topic from user input
2. Second agent generates raw jokes based on the topic
3. Third agent selects and formats the best joke
All agents work together in sequence via the workflow dispatcher
"""

import asyncio
import os

import httpx
from pydantic import BaseModel
from pydantic_ai import RunContext

from paigeant import PaigeantAgent, WorkflowDispatcher, get_transport


class HttpKey(BaseModel):
    api_key: str


class JokeWorkflowDeps(BaseModel):
    """Dependencies for joke workflow agents."""

    model_config = {"arbitrary_types_allowed": True}

    http_key: HttpKey
    user_token: str | None = None


# First agent: Topic extractor
topic_extractor_agent = PaigeantAgent(
    "anthropic:claude-3-5-sonnet-latest",
    deps_type=JokeWorkflowDeps,
    system_prompt=(
        "Extract the joke topic from user input. "
        "Return just the topic name (e.g., 'cats', 'programming', 'work'). "
        "If no specific topic is mentioned, return 'general'."
    ),
)


@topic_extractor_agent.tool
async def validate_topic(ctx: RunContext[JokeWorkflowDeps], user_input: str) -> str:
    """Validate and extract topic from user input."""
    print(f"🔍 Extracting topic from: {user_input}")
    async with httpx.AsyncClient() as client:
        response = await client.get(
            "https://httpbin.org/json",
            headers={"Authorization": f"Bearer {ctx.deps.http_key.api_key}"},
            params={"extract": user_input}
        )
    response.raise_for_status()
    return f"Topic validated from: {user_input[:30]}..."


# Second agent: Joke generator
joke_generator_agent = PaigeantAgent(
    "anthropic:claude-3-5-sonnet-latest",
    deps_type=JokeWorkflowDeps,
    output_type=list[str],
    system_prompt=(
        "Generate 3 jokes based on the topic from the previous step. "
        "Use the workflow payload to get the topic extracted by the first agent. "
        "Return a list of joke strings."
    ),
)


@joke_generator_agent.tool
async def fetch_jokes(ctx: RunContext[JokeWorkflowDeps], topic: str) -> str:
    """Fetch jokes from external API based on topic."""
    print(f"🎭 Generating jokes for topic: {topic}")
    
    async with httpx.AsyncClient() as client:
        response = await client.get(
            "https://httpbin.org/json",
            headers={"Authorization": f"Bearer {ctx.deps.http_key.api_key}"},
            params={"topic": topic, "count": 3}
        )
    response.raise_for_status()
    return f"Generated 3 jokes about {topic}"


# Third agent: Joke selector and formatter
joke_selector_agent = PaigeantAgent(
    "anthropic:claude-3-5-sonnet-latest",
    deps_type=JokeWorkflowDeps,
    system_prompt=(
        "Select the best joke from the list generated by the previous agent. "
        "Format it nicely with proper setup and punchline. "
        "Use the workflow payload to access the jokes from the generator agent."
    ),
)


@joke_selector_agent.tool
async def format_joke(ctx: RunContext[JokeWorkflowDeps], jokes_data: str) -> str:
    """Format the selected joke with proper styling."""
    print(f"✨ Formatting best joke from: {jokes_data}")
    
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://httpbin.org/post",
            headers={"Authorization": f"Bearer {ctx.deps.http_key.api_key}"},
            json={"format": jokes_data, "style": "comedy"}
        )
    response.raise_for_status()
    return f"Formatted joke selected from: {jokes_data}"


async def run_three_agent_joke_workflow():
    """Run the complete three-agent joke workflow."""
    print("🚀 Starting three-agent joke workflow example...")
    
    # Setup workflow infrastructure
    os.environ["PAIGEANT_TRANSPORT"] = "redis"
    
    transport = get_transport()
    dispatcher = WorkflowDispatcher(transport)
    
    # Setup dependencies
    http_key = HttpKey(api_key="joke-api-key-12345")
    deps = JokeWorkflowDeps(
        http_key=http_key,
        user_token="joke-session-token"
    )
    
    # Register first activity: Topic extraction
    dispatcher.register_activity(
        agent="topic_extractor_agent",
        prompt="Extract joke topic from: 'Tell me a funny joke about programming!'",
        deps=deps,
    )
    
    # Register second activity: Joke generation
    dispatcher.register_activity(
        agent="joke_generator_agent", 
        prompt="Generate 3 jokes based on the topic from the first agent",
        deps=deps,
    )
    
    # Register third activity: Joke selection and formatting
    dispatcher.register_activity(
        agent="joke_selector_agent",
        prompt="Select and format the best joke from the generated list",
        deps=deps,
    )
    
    # Dispatch the workflow
    correlation_id = await dispatcher.dispatch_workflow()
    print(f"✅ Three-agent joke workflow dispatched!")
    print(f"📋 Correlation ID: {correlation_id}")
    print(f"🔄 Workflow will process through all three agents in sequence")
    
    return correlation_id


async def main():
    """Main example runner."""
    correlation_id = await run_three_agent_joke_workflow()
    
    print(f"""
📖 JOKE WORKFLOW SUMMARY:
========================
This example created a three-agent joke workflow with correlation ID: {correlation_id}

WORKFLOW STEPS:
1. topic_extractor_agent → Extracts joke topic from user input ("programming")
2. joke_generator_agent → Generates 3 jokes about the topic (receives forwarded message)
3. joke_selector_agent → Selects best joke and formats it (receives joke list)

TO EXECUTE THE WORKFLOW:
Run the executor workers in separate terminals:

Terminal 1 (Topic Extractor):
export PAIGEANT_TRANSPORT=redis
uv run python guides/execution_example.py topic_extractor_agent guides.three_agent_workflow_example

Terminal 2 (Joke Generator):  
export PAIGEANT_TRANSPORT=redis
uv run python guides/execution_example.py joke_generator_agent guides.three_agent_workflow_example

Terminal 3 (Joke Selector):
export PAIGEANT_TRANSPORT=redis
uv run python guides/execution_example.py joke_selector_agent guides.three_agent_workflow_example

BENEFITS OF THIS PATTERN:
✅ Sequential processing - each agent builds on previous work
✅ Separation of concerns - extract → generate → select & format
✅ Fault tolerance - individual agent failures don't crash entire workflow
✅ Scalability - multiple workers can handle each agent type
✅ Observability - correlation ID tracks entire joke creation process
✅ Automatic forwarding - topic flows to generator, jokes flow to selector
""")


if __name__ == "__main__":
    asyncio.run(main())